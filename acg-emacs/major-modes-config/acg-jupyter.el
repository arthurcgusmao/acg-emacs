(use-package jupyter)
(use-package expand-region)


;; @todo: create pull request to jupyter package with changes in this page

;; new function
(defun jupyter-repl-display-buffer ()
  "Display (but not switch to) the REPL buffer of the `jupyter-current-client'."
  (interactive)
  (if jupyter-current-client
      (jupyter-with-repl-buffer jupyter-current-client
        (goto-char (point-max))
        (display-buffer (current-buffer)))
    (error "Buffer not associated with a REPL, see `jupyter-repl-associate-buffer'")))

;; change variable docstr; see appropriate type
(defcustom jupyter-repl-echo-eval-p nil
  "Copy evaluation input to a REPL cell if non-nil.
If non-nil, and when calling the `jupyter-eval-*' functions like
`jupyter-eval-line-or-region', copy the input into a REPL cell.
Otherwise the evaluation request is sent to the kernel without
displaying the code of the request in the REPL.

Note, output generated by requests will always be sent to the
REPL buffer whenever this variable is non-nil. When the REPL
buffer isn't visible, output will also be sent to pop-up buffers
as is done when this variable is nil.

If this variable is 'display, display the REPL buffer in some
window, without selecting it."
  :type 'boolean
  :group 'jupyter-repl)

(cl-defmethod jupyter-eval-string (str &context (jupyter-current-client jupyter-repl-client)
                                       &optional beg end)
  (let (req
        cell-previous-code)
    (jupyter-with-repl-buffer jupyter-current-client
      (when jupyter-repl-echo-eval-p
        (goto-char (point-max))
        (setq cell-previous-code (jupyter-repl-cell-code))
        (jupyter-repl-replace-cell-code str)
        (setq str nil))
      (let* ((jupyter-inhibit-handlers
              ;; When copying the input to the REPL we need the handlers to
              ;; update the REPL state
              (unless jupyter-repl-echo-eval-p
                '(not :input-request))))
        (setq req (jupyter-send-execute-request jupyter-current-client
                    :code str
                    :store-history jupyter-repl-echo-eval-p))
        (if jupyter-repl-echo-eval-p
            (jupyter-repl-replace-cell-code cell-previous-code))))
    ;; Add callbacks to display evaluation output in pop-up buffers either when
    ;; we aren't copying the input to a REPL cell or, if we are, when the REPL
    ;; buffer isn't visible.
    ;;
    ;; Make sure we do this in the original buffer where STR originated from
    ;; when BEG and END are non-nil.
    (prog1 req
      (if (eq jupyter-repl-echo-eval-p 'display)
          (jupyter-repl-display-buffer)
        (unless (and jupyter-repl-echo-eval-p
                     (get-buffer-window (oref jupyter-current-client buffer) 'visible))
          (jupyter-eval-add-callbacks req beg end))))))


;; Custom Python functions

;; Open Python variable content in external app
(defun acg/jupyter-open-python-variable-external-app ()
  "Saves the content of a Python variable to a temporary file and opens
it with the default external app."
  (interactive)
  (let* ((var (read-string "Enter variable: "
                           (thing-at-point 'symbol)))
         (type (jupyter-eval (format "type(%s)" var)))
         (tempfpath (concat temporary-file-directory "emacs-jupyter---"
                            (format-time-string "%Y-%m-%d--%Hh%Mm%Ss--") var)))
    (pcase type
      ("pandas.core.frame.DataFrame"
       (setq tempfpath (concat tempfpath ".csv"))
       (jupyter-eval (format "%s.to_csv('%s')" var tempfpath))
       (acg/open-in-external-app (list tempfpath)))
      ("pandas.core.series.Series"
       (setq tempfpath (concat tempfpath ".csv"))
       (jupyter-eval (format "%s.to_csv('%s')" var tempfpath))
       (acg/open-in-external-app (list tempfpath)))
      ("numpy.ndarray"
       (setq tempfpath (concat tempfpath ".csv"))
       (jupyter-eval (format "import numpy as np; np.savetxt('%s', %s, delimiter=',')" tempfpath var))
       (acg/open-in-external-app (list tempfpath)))
      ("str"
       (setq tempfpath (concat tempfpath ".txt"))
       (jupyter-eval (format "with open('%s','w') as f: f.write(%s)" tempfpath var))
       (acg/open-in-external-app (list tempfpath)))
      ("dict"
       (setq tempfpath (concat tempfpath ".json"))
       (jupyter-eval (format "with open('%s','w') as f: f.write(json.dumps(%s, indent=4))" tempfpath var))
       (acg/open-in-external-app (list tempfpath)))
      )))

;; Show value of the last variable that was assigned in Jupyter
(defun acg/add-last-var (code-str)
  "Returns a modified string by appending to CODE-STR a newline
with the last line's assigned variable (if any variable
assignment occurred). Useful for code inspection in REPLs (such
as Jupyter)."
  (let (lines last-line)
    (setq lines (split-string code-str "\n"))
    (delete "" lines)
    (setq last-line (car (last lines)))
    (if (string-match
         "^\\`\\([A-Za-z]+[A-Za-z0-9_\.]*\\) *[\+\*\/-]*=[^=].+\\'"
         last-line)
        (let* ((var-name (match-string 1 last-line)))
          (concat code-str "\n" var-name))
      code-str)))

(defun acg/unindent-add-last-var (code-str)
  "Calls the functions `acg/add-last-var' and `acg/unindent-string'."
  (acg/add-last-var (acg/unindent-string code-str)))


;; Configurations

(defun acg/jupyter-toggle-use-overlays-repl (&optional arg)
  "Toggles automatically between using overlays in the buffer
where code is and sending code to be evaluated in the REPL."
  (interactive)
  (if jupyter-eval-use-overlays
      (progn
        (setq jupyter-eval-use-overlays nil
              jupyter-repl-echo-eval-p 'display)
        (message "Jupyter overlays disabled; sending output to REPL."))
    (progn
      (setq jupyter-eval-use-overlays t
            jupyter-repl-echo-eval-p nil)
      (message "Jupyter overlays enabled."))))

(setq jupyter-eval-use-overlays nil
      jupyter-repl-echo-eval-p 'display)

;; Custom faces/visuals
(set-face-attribute 'jupyter-repl-traceback nil :background "#660000")

;; Remove prefix from overlay
(setq jupyter-eval-overlay-prefix nil)


;; Keybindings
(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c j") 'jupyter-run-repl))
(define-key jupyter-repl-interaction-mode-map (kbd "C-c r") 'jupyter-repl-restart-kernel)

(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-b") (acg/eval-with 'jupyter-eval-string 'mark-whole-buffer 'acg/add-last-var))
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-p") (acg/eval-with 'jupyter-eval-string 'mark-page 'acg/add-last-var))
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-c") (acg/eval-with 'jupyter-eval-string 'acg/mark-dwim 'acg/add-last-var))
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-l") (acg/eval-with 'jupyter-eval-string 'acg/expand-region-to-whole-lines 'acg/unindent-add-last-var))
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-d") 'acg/jupyter-send-defun-body)
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-e") 'acg/jupyter-open-python-variable-external-app)
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-o") nil)
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-o t") 'acg/jupyter-toggle-use-overlays-repl)
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-o r") 'jupyter-eval-remove-overlays)


;; To-Dos -- Functions to look into
;;     - jupyter-completion-symbol-beginning -- What I want here is to complete on `pd.DataFram...' instead of just `DataFram...'; Check to see what is the exact use of this function and if that is not currently working or is

;; Hotfix
(add-hook 'jupyter-repl-mode-hook
          (lambda () (font-lock-mode 0)))
