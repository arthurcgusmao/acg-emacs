
;; -------------------------------------------------------------------------
;; Adding Repositories
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(setq package-enable-at-startup nil)
(package-initialize)


;; -------------------------------------------------------------------------
;; Checking and installing defined packages

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.
Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)


;; -------------------------------------------------------------------------
;; Autoloading all files within directory

(defun my-load-all-in-directory (dir)
  "`load' all elisp libraries in directory DIR which are not already loaded."
  (interactive "D")
  (let ((libraries-loaded (mapcar #'file-name-sans-extension
                                  (delq nil (mapcar #'car load-history)))))
    (dolist (file (directory-files dir t ".+\\.elc?$"))
      (let ((library (file-name-sans-extension file)))
        (unless (member library libraries-loaded)
          (load library nil t)
          (push library libraries-loaded))))))


;; -------------------------------------------------------------------------
;; Other configurations

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)














(ensure-package-installed 'helm
			  'crux
			  'beacon
			  'which-key
			  'undo-tree
			  'anzu
			  'projectile
			  'diminish
			  'web-mode
			  'scss-mode
			  'smartparens
			  'markdown-mode
			  'less-css-mode
			  )

(my-load-all-in-directory "~/.emacs.d/acg/modules")
(my-load-all-in-directory "~/.emacs.d/acg/packages-config")

(provide 'packages)


















(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.php$" . web-mode))
(setq-default web-mode-enable-auto-pairing t
              web-mode-enable-auto-opening t
              web-mode-enable-auto-indentation t
              web-mode-enable-block-face t
              web-mode-enable-part-face t
              ;; web-mode-enable-comment-keywords t
              web-mode-enable-css-colorization t
              web-mode-enable-current-element-highlight t
              web-mode-enable-heredoc-fontification t
              web-mode-enable-engine-detection t)














(defun prelude-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first. If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))


















;; -------------------------------------------------------------------------
;; Rebinding Commands

;; Rebinding Emacs built-in commands
(global-set-key (kbd "C-s") 'save-buffer)
(global-unset-key (kbd "C-f"))
(global-set-key (kbd "C-f") 'isearch-forward)
(define-key isearch-mode-map "\C-f" 'isearch-forward)
(define-key isearch-mode-map "\C-g" 'isearch-repeat-forward)
;;(define-key isearch-mode-map "\C-\S-G" 'isearch-repeat-backward) ;; @TODO: Not working!
(global-set-key (kbd "C-w") 'kill-this-buffer)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "M-q") 'other-window)
(require 'csharp-mode)
(define-key csharp-mode-map (kbd "C-d") nil)
(global-set-key (kbd "C-d") 'kill-whole-line)
(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "<M-return>") 'open-line)
(global-set-key (kbd "<C-backspace>") 'backward-kill-word)
(global-set-key (kbd "<C-S-delete>") 'kill-line)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-S-Z") 'redo)
(global-set-key (kbd "C-S-X") 'clipboard-kill-region)
(global-set-key (kbd "C-S-V") 'clipboard-yank)

;; Rebinding Helm commands
(require 'helm)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-S-B") 'helm-mini)
(global-set-key (kbd "C-S-F") 'helm-find-files)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
;;(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; makes TAB work in terminal
(define-key helm-map (kbd "M-a") 'helm-select-action) ; list actions using M-a

;; Binding Crux commands
(require 'crux)
(crux-reopen-as-root-mode 1)
(global-set-key (kbd "<C-S-backspace>") 'crux-kill-line-backwards)
(global-set-key (kbd "<C-return>") 'crux-smart-open-line)
(global-set-key (kbd "<C-S-return>") 'crux-smart-open-line-above)
(global-set-key (kbd "C-b") 'crux-switch-to-previous-buffer)
(global-unset-key (kbd "C-/"))
(local-unset-key (kbd "C-/"))
(define-key undo-tree-map (kbd "C-/") nil)
(global-set-key (kbd "C-/") (crux-with-region-or-line comment-or-uncomment-region))
(global-set-key (kbd "C-S-C") (crux-with-region-or-line clipboard-kill-ring-save))

;; Binding Custom Functions commands
(global-set-key (kbd "<home>") 'prelude-move-beginning-of-line)



;; ----------------------------------------------------------------------
;; Todo List
;;
;; - Ver questão cursor não mudar com scroll (prelude ui)
;; - Ver smart-mode-line























;; -------------------------------------------------------------------------
;; Editor Configurations


;; lets you undo and redo changes in the window configuration
(winner-mode 1)

;; delete the selection with a keypress
(delete-selection-mode t)

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; smart tab behavior - indent or complete
(setq tab-always-indent 'complete)

;; projectile is a project management mode
(require 'projectile)
;;(setq projectile-cache-file (expand-file-name  "projectile.cache" prelude-savefile-dir))
(projectile-global-mode t)

;; anzu-mode enhances isearch & query-replace by showing total matches and current match position
(require 'anzu)
(diminish 'anzu-mode)
(global-anzu-mode)

;; autosave the undo-tree history
(setq undo-tree-history-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq undo-tree-auto-save-history t)

;; sensible undo
(global-undo-tree-mode)
(diminish 'undo-tree-mode)

;; smartparens
(require 'smartparens-config)
(setq sp-base-key-bindings 'paredit)
(setq sp-autoskip-closing-pair 'always)
(setq sp-hybrid-kill-entire-symbol nil)
(sp-use-paredit-bindings)

(show-smartparens-global-mode +1)



























;; -------------------------------------------------------------------------
;; UI, Themes & Cursor
(tool-bar-mode -1)
(menu-bar-mode -1)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'zenburn t)
(setq-default cursor-type 'bar) ;; makes cursor a bar instead of rectangle
(blink-cursor-mode -1) ;; disable blinking cursor
(setq inhibit-startup-screen t) ;; disable startup screen

;; diminish keeps the modeline tidy
(require 'diminish)

(beacon-mode +1) ;; never lose the cursor again
(diminish 'beacon-mode)

(which-key-mode +1) ;; show available keybindings after you start typing
(diminish 'which-key-mode)

;; nice scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; testing transient function

